<?php

/**
 * @file
 * Password related enhancements.
 */

declare(strict_types = 1);

/**
 * Copyright (C) 2020 PRONOVIX GROUP BVBA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\password_enhancements\PasswordPolicy;
use Drupal\password_enhancements\PasswordPolicyInterface;
use Drupal\password_enhancements\Plugin\Exception\PasswordConstraintPluginValidationException;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function password_enhancements_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'password_enhancements_error_messages' => [
      'variables' => [
        'attributes' => NULL,
        'messages' => [],
        'title' => '',
        'title_attributes' => NULL,
      ],
    ],
    'password_enhancements_policy_constraint' => [
      'variables' => [
        'description' => '',
        'attributes' => NULL,
      ],
    ],
    'password_enhancements_policy_constraints' => [
      'variables' => [
        'attributes' => NULL,
        'constraints' => [],
        'descriptions' => [],
        'title' => '',
        'title_attributes' => [],
      ],
    ],
    'password_enhancements_logged_out_message' => [
      'variables' => [
        'attributes' => NULL,
        'message' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_module_implements_alter().
 */
function password_enhancements_module_implements_alter(array &$implementations, string $hook): void {
  // @see https://www.drupal.org/project/drupal/issues/3120298
  // @see \Drupal\Core\Extension\ModuleHandler::alter()
  if ($hook === 'form_alter' && isset($implementations['password_enhancements'])) {
    // Move our hook implementation to the bottom to be able to check
    // whether other hooks change the access of the password field.
    $group = $implementations['password_enhancements'];
    unset($implementations['password_enhancements']);
    $implementations['password_enhancements'] = $group;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function password_enhancements_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id === 'user_register_form') {
    $config = \Drupal::config('password_enhancements.settings');
    if (empty($form['account']['pass']) && !empty($config->get('require_password'))) {
      $form['account']['pass'] = [
        '#type' => 'password_confirm',
        '#size' => 25,
        '#description' => t('Provide a password for the new account in both fields.'),
        '#required' => TRUE,
      ];
      $form['actions']['submit']['#submit'][] = 'password_enhancements_form_user_register_form_alter_password_required_submit';
    }
  }

  _password_enhancements_user_form_apply_password_policy_validation($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_password_enhancements_change_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  _password_enhancements_user_form_apply_password_policy_validation($form, $form_state);
}

/**
 * Apply password policy validation on user forms.
 *
 * @param array $form
 *   The form for which the password requirements validation should be added.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function _password_enhancements_user_form_apply_password_policy_validation(array &$form, FormStateInterface $form_state): void {
  // If the password form element is not visible then there is nothing to do.
  if (empty($form['account']['pass'])) {
    return;
  }

  _password_enhancements_user_form_prepare_form_for_password_policy($form, $form_state);

  // Get the selected roles.
  $selected_user_roles = _password_enhancements_get_roles_from_form_state($form, $form_state);
  // Try to load policy by its role and priority.
  try {
    /** @var \Drupal\password_enhancements\PasswordPolicyInterface|null $policy */
    $policy = \Drupal::service('password_enhancements.password_policy_manager')->loadPolicyByRoles($selected_user_roles);

    // No password policy configured for the selected roles, there is
    // nothing to do.
    if ($policy === NULL) {
      return;
    }

    // Try to get constraint plugin settings.
    $plugin_settings = \Drupal::service('password_enhancements.password_constraint')->getPluginSettings($selected_user_roles);
    // With no password policy configured for the selected roles, there is
    // nothing to do.
    if ($plugin_settings['minimumRequiredConstraints'] === NULL) {
      return;
    }
    // Hide the fieldset if applied policies contain no constraints.
    if (empty($plugin_settings['configs'])) {
      $form['account']['password_policy_constraints']['#attributes']['style'] = 'display: none;';
    }
    else {
      unset($form['account']['password_policy_constraints']['#attributes']['style']);
      $form['account']['password_policy_constraints']['#constraints'] = $plugin_settings['constraints'];
      $form['account']['password_policy_constraints']['#attached']['library'] = array_merge(['password_enhancements/requirements'], $plugin_settings['libraries']);
      $form['account']['password_policy_constraints']['#attached']['drupalSettings']['passwordEnhancementsConstraint']['plugins'] = $plugin_settings['configs'];
      $form['account']['password_policy_constraints']['#attached']['drupalSettings']['passwordEnhancementsConstraint']['minimumRequiredConstraints'] = $plugin_settings['minimumRequiredConstraints'];
    }
  }
  catch (\Exception $e) {
    \Drupal::service('logger.password_enhancements')->logException("Failed to load policy and constraints on the '{$form_state->getFormObject()->getFormId()}' form.", $e);
    \Drupal::messenger()->addError(t('Password field cannot be validated at this moment. The form is temporarily disabled. Try to refresh the page. If this problem persists, please contact with the site administrators.'));
    // Disable all form elements, do not allow user to submit the form.
    foreach (Element::getVisibleChildren($form) as $element) {
      $form[$element]['#disabled'] = TRUE;
    }
  }
}

/**
 * Apply all required changes on user forms by this module.
 *
 * These changes have to be made on all forms, even if there is no password
 * policy configured because these changes cannot be added later, for example
 * when a user adds selects a new role on the form.
 *
 * @param array $form
 *   The form for which the password requirements validation should be added.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function _password_enhancements_user_form_prepare_form_for_password_policy(array &$form, FormStateInterface $form_state): void {
  // Sanity check, if the password form element is not visible then there is
  // nothing to do.
  if (empty($form['account']['pass']) || !($form['account']['pass']['#access'] ?? TRUE)) {
    return;
  }

  $weight = 0;
  // Ensure all account form elements have a weight.
  foreach (Element::children($form['account']) as $key) {
    if (!array_key_exists('#weight', $form['account'][$key])) {
      $form['account'][$key]['#weight'] = $weight;
      $weight++;
    }
  }

  // Set wrapper for the constraints.
  $ajax_wrapper = 'password-policy-constraint-ajax-wrapper';
  // Initialize form element with sane default values.
  $form['account']['password_policy_constraints'] = [
    '#theme' => 'password_enhancements_policy_constraints',
    '#title' => t('Password requirements'),
    '#constraints' => [],
    '#weight' => $form['account']['pass']['#weight'] + 0.001,
    '#prefix' => "<div id='{$ajax_wrapper}'>",
    '#suffix' => '</div>',
    '#attached' => [
      'library' => ['password_enhancements/requirements'],
      'drupalSettings' => [
        'passwordEnhancementsConstraint' => [
          'updateEffect' => \Drupal::config('password_enhancements.settings')->get('constraint_update_effect'),
          'plugins' => [],
          'minimumRequiredConstraints' => 0,
        ],
      ],
    ],
    '#attributes' => [
      'id' => 'password-enhancements-policy-constraints',
    ] + (empty($form['account']['pass']['#required']) ? ['style' => 'display: none;'] : []),
    '#title_attributes' => [
      'class' => ['title'],
    ],
  ];

  // Add ajax callback for role change to update the policies for the selected
  // role(s).
  if (!empty($form['account']['roles'])) {
    $form['account']['roles']['#ajax'] = [
      'callback' => 'password_enhancements_update_constraints_by_roles',
      'event' => 'change',
      'wrapper' => $ajax_wrapper,
    ];
  }
  $form['#validate'][] = 'password_enhancements_form_user_register_form_alter_validate';
}

/**
 * Get roles from the form state.
 *
 * @param array $form
 *   The current form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   The set roles on the form.
 */
function _password_enhancements_get_roles_from_form_state(array $form, FormStateInterface $form_state): array {
  $roles = $form_state->getValue('roles') ?: [];
  $input = $form_state->getUserInput();
  // If there was no input then grab the default roles.
  if (empty($roles) && empty($input['roles']) && !empty($form['account']['roles']['#default_value'])) {
    $roles = $form['account']['roles']['#default_value'];
  }
  return array_unique(array_merge([AccountInterface::AUTHENTICATED_ROLE], $roles, (!empty($input['roles']) ? array_keys($input['roles']) : [])));
}

/**
 * Validate callback for password_enhancements_form_user_register_form_alter().
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function password_enhancements_form_user_register_form_alter_validate(array &$form, FormStateInterface $form_state): void {
  $password = $form_state->getValue('pass');
  // Password field was not visible on the page, there is nothing to do.
  if (empty($password)) {
    return;
  }

  $roles = $form_state->getValue('roles') ?: [];

  // Try to load the password rules for the given roles.
  // PHPCS has a hard time understanding this syntax of assignment.
  // phpcs:disable DrupalPractice.CodeAnalysis.VariableAnalysis.UndefinedVariable
  /** @var \Drupal\password_enhancements\PasswordConstraintInterface[] $constraints */
  [$minimum_required_constraints, $constraints] = \Drupal::service(
    'password_enhancements.password_constraint'
  )->getPasswordRulesForRoles($roles);

  // If no constraints are defined then we have nothing to do here.
  if (empty($constraints)) {
    return;
  }

  // Get constraints and calculate the minimum required constraints.
  $constraints_count = count($constraints);
  $minimum_required_constraints = $constraints_count < $minimum_required_constraints ?
    $constraints_count :
    $minimum_required_constraints;

  // Validate password against the defined constraints.
  $error_message_collection = [
    'optional' => [],
    'required' => [],
  ];
  $valid_required_count = 0;
  $valid_optional_count = 0;
  foreach ($constraints as $constraint) {
    // phpcs:enable
    $is_required = $constraint->isRequired();
    try {
      $constraint->validate($password);

      // Count valid constraints.
      if ($is_required) {
        $valid_required_count++;
      }
      else {
        $valid_optional_count++;
      }
    }
    catch (PasswordConstraintPluginValidationException $e) {
      $error_message_collection[$is_required ? 'required' : 'optional'][] = $e->getMessage();
    }
  }

  // Collect error messages.
  $error_messages = [];
  if (($valid_required_count + $valid_optional_count) < $minimum_required_constraints) {
    $error_messages = array_merge($error_message_collection['required'], $error_message_collection['optional']);
  }
  elseif ($valid_required_count === 0 && $error_message_collection['required'] === [] && $valid_optional_count < $minimum_required_constraints) {
    $error_messages = &$error_message_collection['optional'];
  }
  elseif ($error_message_collection['required'] !== []) {
    $error_messages = &$error_message_collection['required'];
  }

  // Set form error and show the error message if there is any.
  if ($error_messages !== []) {
    $messages = [
      '#theme' => 'password_enhancements_error_messages',
      '#title' => t("The given password doesn't meet some requirements:"),
      '#messages' => $error_messages,
      '#attributes' => [
        'class' => ['password-error-messages'],
      ],
      '#title_attributes' => [
        'class' => ['title', 'password-error-message'],
      ],
    ];
    $form_state->setError($form['account']['pass'], \Drupal::service('renderer')->render($messages));
  }
}

/**
 * Submit callback for password_enhancements_form_user_register_form_alter().
 *
 * This callback runs only if the password field was set to always required and
 * the verify_email set to true.
 *
 * This extra submit callback is required because if the verify_email is set to
 * TRUE then by default Drupal generates a random password so we have to make
 * sure the password from the input is being set instead of the random generated
 * password.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function password_enhancements_form_user_register_form_alter_password_required_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\user\UserInterface $user */
  if (!empty($form['account']['pass'])) {
    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
    $form_object = $form_state->getFormObject();
    $user = $form_object->getEntity();

    try {
      $user->setPassword($form_state->getUserInput()['pass']['pass1'])->save();
    }
    catch (\Exception $e) {
      \Drupal::service('logger.password_enhancements')->logException('Failed to set password for the user at registration.', $e);
      \Drupal::messenger()->addError(t('Failed to set your password, please <a href="@url">reset your password</a>.', [
        '@url' => Url::fromRoute('user.pass')->toString(),
      ]));
    }
  }
}

/**
 * Ajax callback for updating the constraints on role change.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   Renderable form array for password policy constraints.
 */
function password_enhancements_update_constraints_by_roles(array $form, FormStateInterface $form_state): array {
  return $form['account']['password_policy_constraints'];
}

/**
 * Implements hook_entity_base_field_info().
 */
function password_enhancements_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['password_enhancements_password_changed_date'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('Last password change'))
      ->setDescription(t('The last time when the user has changed the password.'))
      ->setDefaultValue(0);

    $fields['password_enhancements_password_change_required'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Password change required'))
      ->setDescription(t('Forces the user to change the password.<br><strong>Warning:</strong> If it is checked, the user will be redirected to the password change form.'))
      ->setDefaultValue(0)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 99,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_field_access().
 */
function password_enhancements_entity_field_access(string $operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL): AccessResultInterface {
  if ($field_definition->getName() === 'password_enhancements_password_change_required') {
    return AccessResult::forbiddenIf(!$account->hasPermission('administer user password enhancements settings'));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function password_enhancements_user_presave(UserInterface $user): void {
  // Update the last password changed date if the password was changed.
  if (empty($user->original) || $user->original->pass->value !== $user->pass->value) {
    $user->get('password_enhancements_password_changed_date')->setValue(\Drupal::time()->getRequestTime());
  }
}

/**
 * Implements hook_user_login().
 */
function password_enhancements_user_login(UserInterface $user): void {
  $policy = \Drupal::service('password_enhancements.password_policy_manager')->loadPolicyByRoles($user->getRoles());
  $is_password_change_required = $user->get('password_enhancements_password_change_required')->getValue() ?
    (bool) $user->get('password_enhancements_password_change_required')->getValue()[0]['value'] :
    FALSE;
  if ($is_password_change_required || ($policy !== NULL && \Drupal::service('password_enhancements.password_checker')->isExpired($policy))) {
    // Set a session attribute to indicate that the user has just logged in
    // and don't require providing the password again on the password change
    // form.
    \Drupal::service('session_manager')
      ->getBag('attributes')
      ->getBag()
      ->set('password_enhancements_login_password_change_required', TRUE);
  }
}

/**
 * Implements hook_legal_allowed_paths_alter().
 */
function password_enhancements_legal_allowed_paths_alter(array &$allowed_paths): void {
  // Please note that this is only compatible with
  // https://www.drupal.org/project/legal/issues/2897486 but looks like it is
  // not even merged yet.
  $allowed_paths[] = Url::fromRoute('password_enhancements.password_change')->toString();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_enhancements_form_user_role_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Bail out early without the "administer user password enhancements settings"
  // permission.
  if (!\Drupal::currentUser()->hasPermission('administer user password enhancements settings')) {
    return;
  }
  /** @var \Drupal\user\RoleForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\user\Entity\Role $role */
  $role = $form_object->getEntity();
  if ($role->id() === AccountInterface::ANONYMOUS_ROLE) {
    return;
  }
  $policy = PasswordPolicy::createFromRole(\Drupal::service('plugin.manager.password_enhancements.constraint'), $role);

  // A master killswitch to allow removing the policy from the role.
  $form['password_enhancements_apply_policy'] = [
    '#type' => 'checkbox',
    '#title' => t('Apply password policy to this role'),
    '#default_value' => !empty($role->getThirdPartySettings('password_enhancements')),
  ];

  $form['password_enhancements'] = [
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Password policy'),
    '#states' => [
      'visible' => [
        ':input[name="password_enhancements_apply_policy"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['password_enhancements']['minimumRequiredConstraints'] = [
    '#type' => 'number',
    '#title' => t('Minimum required constraints'),
    '#min' => 1,
    '#required' => TRUE,
    '#default_value' => $policy ? $policy->getMinimumRequiredConstraints() : 1,
  ];

  $expire_days = $policy ? $policy->getExpireDays() : PasswordPolicyInterface::PASSWORD_NO_EXPIRY;
  $form['password_enhancements']['expire_password'] = [
    '#type' => 'checkbox',
    '#title' => t('Expire password'),
    '#default_value' => $expire_days > 0,
  ];

  $form['password_enhancements']['expire_days'] = [
    '#type' => 'number',
    '#title' => t('Expire password after'),
    '#field_suffix' => t('day(s).'),
    '#default_value' => $expire_days ?: PasswordPolicyInterface::PASSWORD_NO_EXPIRY,
    '#min' => 0,
    '#states' => [
      'visible' => [
        ':input[name="password_enhancements[expire_password]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['password_enhancements']['expire_warn_before_days'] = [
    '#type' => 'number',
    '#title' => t('Show warning'),
    '#description' => t('Show a warning message before the password would expire.<br>If set to 0 it will not show any message.'),
    '#field_suffix' => t('day(s) before the password expires.'),
    '#default_value' => $policy ? $policy->getExpireWarnDays() : PasswordPolicyInterface::PASSWORD_NO_WARNING,
    '#min' => 0,
    '#states' => [
      'visible' => [
        ':input[name="password_enhancements[expire_password]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['password_enhancements']['expiry_warning_message'] = [
    '#type' => 'textarea',
    '#title' => t('Expiry warning message'),
    // @todo #item_list
    '#description' => t("This message will be presented for the user if the user's password is about to expire.<br>Available placeholders: <ul><li>@url: URL for the user edit page;</li><li>@date_time: the date and time when the password will expire.</li></ul>"),
    '#default_value' => $policy ? $policy->getExpiryWarningMessage() : 'Your password will expire on @date_time, please <a href="@url">change your password</a> before it expires to prevent any potential data loss.',
    '#states' => [
      'invisible' => [
        [
          ':input[name="password_enhancements[expire_password]"]' => ['checked' => FALSE],
        ],
        [
          ':input[name="password_enhancements[expire_warn_before_days]"]' => ['value' => 0],
        ],
      ],
    ],
    // The #states API cannot be used for this: make the expiry_warning_message
    // required when expire_password is checked AND expire_warn_before_days > 0.
    '#attached' => [
      'library' => ['password_enhancements/admin'],
    ],
  ];

  // Build the list of existing password constraints for this password
  // policy.
  $form['password_enhancements']['constraints'] = [
    '#type' => 'table',
    '#header' => [
      t('Constraint'),
      t('Required'),
      t('Summary'),
      t('Operations'),
    ],
    '#rows' => [],
    '#attributes' => [
      'id' => 'password-enhancements-policy-constraints',
    ],
    '#empty' => t('There are no constraints in this policy yet. Add one by selecting an option below.'),
    // Render constraints below parent elements.
    '#weight' => 5,
  ];
  $old_unique_constraints = [];
  if ($policy) {
    foreach ($policy->getConstraints() as $constraint) {
      if ($constraint->getPluginDefinition()['unique']) {
        $old_unique_constraints[$constraint->getPluginId()] = $constraint->getPluginId();
      }
      $key = $constraint->getUuid();
      $form['password_enhancements']['constraints']['#rows'][$key]['constraint'] = [
        '#tree' => FALSE,
        'data' => [
          'name' => [
            '#plain_text' => $constraint->name(),
          ],
        ],
      ];

      $form['password_enhancements']['constraints']['#rows'][$key]['required'] = [
        'data' => [
          'required' => [
            '#plain_text' => $constraint->isRequired() ? t('Yes') : t('No'),
          ],
        ],
      ];

      $summary = $constraint->getSummary();
      if ($summary) {
        $form['password_enhancements']['constraints']['#rows'][$key]['summary'] = [
          'data' => [
            'summary' => [
              $summary,
            ],
          ],
        ];
      }

      $links = [
        'edit' => [
          'title' => t('Edit'),
          'url' => Url::fromRoute('password_enhancements.constraint_edit_form', [
            'user_role' => $policy->getRole()->id(),
            'password_constraint' => $key,
          ]),
        ],
        'delete' => [
          'title' => t('Delete'),
          'url' => Url::fromRoute('password_enhancements.constraint_delete_form', [
            'user_role' => $policy->getRole()->id(),
            'password_constraint' => $key,
          ]),
        ],
      ];
      $form['password_enhancements']['constraints']['#rows'][$key]['operations'] = [
        'data' => [
          'operations' => [
            '#type' => 'operations',
            '#links' => $links,
          ],
        ],
      ];
    }
  }

  // Build the new password constraint addition form and add it to the
  // constraint list.
  $new_constraint_options = [];
  $constraint_definitions = \Drupal::service('plugin.manager.password_enhancements.constraint')->getDefinitions();
  uasort($constraint_definitions, static function ($a, $b) {
    return Unicode::strcasecmp($a['id'], $b['id']);
  });
  foreach ($constraint_definitions as $constraint => $definition) {
    if (!isset($old_unique_constraints[$constraint])) {
      $new_constraint_options[$constraint] = $definition['name'];
    }
  }
  $form['password_enhancements']['new_constraint'] = [
    '#type' => 'container',
    '#tree' => FALSE,
    'password_enhancements_new_constraint' => [
      '#type' => 'select',
      '#title' => t('Constraint'),
      '#title_display' => 'invisible',
      '#options' => $new_constraint_options,
      '#empty_option' => t('Select a new constraint'),
    ],
    '#attributes' => [
      'class' => 'password-policy-new',
    ],
    // Render add new constraint part below already-existing constraints.
    '#weight' => 10,
  ];

  $form['#validate'][] = 'password_enhancements_form_user_role_form_alter_validate';
  $form['actions']['submit']['#submit'][] = 'password_enhancements_form_user_role_form_alter_submit';
  $form['#entity_builders'][] = 'password_enhancements_form_user_role_form_alter_builder';
}

/**
 * Custom entity builder for password_enhancements_form_user_role_form_alter.
 *
 * @param string $entity_type
 *   The entity type.
 * @param \Drupal\user\RoleInterface $role
 *   The role.
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @see password_enhancements_form_user_role_form_alter()
 */
function password_enhancements_form_user_role_form_alter_builder(string $entity_type, RoleInterface $role, array &$form, FormStateInterface $form_state): void {
  if (!$form_state->getValue('password_enhancements_apply_policy')) {
    $role->unsetThirdPartySetting('password_enhancements', 'expireSeconds');
    $role->unsetThirdPartySetting('password_enhancements', 'expireWarnSeconds');
    $role->unsetThirdPartySetting('password_enhancements', 'expiryWarningMessage');
    $role->unsetThirdPartySetting('password_enhancements', 'minimumRequiredConstraints');
    $role->unsetThirdPartySetting('password_enhancements', 'constraints');
    return;
  }
  $role->setThirdPartySetting(
    'password_enhancements',
    'minimumRequiredConstraints',
    $form_state->getValue(
      ['password_enhancements', 'minimumRequiredConstraints']
    )
  );
  if (!$form_state->getValue(['password_enhancements', 'expire_password'])) {
    $role->setThirdPartySetting('password_enhancements', 'expireSeconds', 0);
    $role->setThirdPartySetting('password_enhancements', 'expireWarnSeconds', 0);
    $role->setThirdPartySetting('password_enhancements', 'expiryWarningMessage', NULL);
  }
  else {
    // Store days in seconds.
    $role->setThirdPartySetting(
      'password_enhancements',
      'expireSeconds',
      $form_state->getValue(['password_enhancements', 'expire_days']) * 86400
    );
    $role->setThirdPartySetting(
      'password_enhancements',
      'expireWarnSeconds',
      $form_state->getValue(
        ['password_enhancements', 'expire_warn_before_days']
      ) * 86400
    );
    $role->setThirdPartySetting(
      'password_enhancements',
      'expiryWarningMessage',
      $form_state->getValue(['password_enhancements', 'expiry_warning_message'])
    );
  }
}

/**
 * Custom form validate callback for user_role_form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function password_enhancements_form_user_role_form_alter_validate(array $form, FormStateInterface $form_state): void {
  $expire_password = $form_state->getValue(
    ['password_enhancements', 'expire_password']
  );
  $expire_days = $form_state->getValue(
    ['password_enhancements', 'expire_days']
  );
  if ($expire_password && $expire_days < 1) {
    $form_state->setError($form['password_enhancements']['expire_days'], t('Expiring passwords must live for at least one day.'));
  }
  $expire_warn_before_days = $form_state->getValue(
    ['password_enhancements', 'expire_warn_before_days']
  );
  if ($expire_password && $expire_days > 0 && $expire_warn_before_days > 0 && $expire_warn_before_days > $expire_days) {
    $form_state->setError($form['password_enhancements']['expire_warn_before_days'], t('Cannot warn about password expiry before it is set.'));
  }
  if ($expire_password && $expire_days > 0 && $expire_warn_before_days > 0 && trim(
      $form_state->getValue(['password_enhancements', 'expiry_warning_message'])
    ) === '') {
    $form_state->setError($form['password_enhancements']['expiry_warning_message'], t('Expiry warning message cannot be empty for expiring passwords.'));
  }
}

/**
 * Custom form submit callback for user_role_form to add a new constraint.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function password_enhancements_form_user_role_form_alter_submit(array $form, FormStateInterface $form_state): void {
  if (!$form_state->getValue('password_enhancements_new_constraint')) {
    return;
  }
  /** @var \Drupal\user\RoleForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\user\Entity\Role $role */
  $role = $form_object->getEntity();

  // Load the configuration form for this option.
  // Let's kill ?destination= parameter this form already has, as it would
  // override the redirect being set here.
  // @see https://drupal.stackexchange.com/a/250474
  \Drupal::request()->query->remove('destination');
  $form_state->setRedirect('password_enhancements.constraint_add_form', [
    'user_role' => $role->id(),
    'password_constraint' => $form_state->getValue('password_enhancements_new_constraint'),
  ]);
}
