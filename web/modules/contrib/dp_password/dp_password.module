<?php

/**
 * @file
 * Devportal Password policy module for Drupal.
 */

declare(strict_types = 1);

/**
 * Copyright (C) 2019 PRONOVIX GROUP BVBA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dp_password_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (isset($form['account']['pass'])) {
    if (!empty($form['account']['pass']['#description'])) {
      $description = $form['account']['pass']['#description'];
      $form['account']['pass']['#description'] = ((string) $description) . ' ' . (string) _dp_password_requirements_error();
    }
    // Custom user profile form validate function to validate the password.
    $form['#validate'][] = '_dp_password_user_profile_form_validate';
  }
}

/**
 * Custom user profile form validate function to validate password.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   A keyed array containing the current state of the form.
 *
 * @see dp_password_form_user_form_alter()
 */
function _dp_password_user_profile_form_validate(array &$form, FormStateInterface $form_state): void {
  $config = \Drupal::config('user.settings');
  // When user email verification is enabled Drupal doesn't allow setting
  // password on registration. The Drupal generated password will not always
  // meet the applicable policies in place. In that scenario the password
  // validation should be skipped. The user will have to set a password
  // after clicking the one-time login link instead.
  if (($form['#form_id'] === 'user_register_form') && $config->get('verify_mail')) {
    return;
  }

  // Validate password if it's present.
  $password = $form_state->getValue('pass');
  if (!$password) {
    return;
  }
  // The password must contain three of the following four character types:
  // uppercase, lowercase, numeric and special characters (eg. &, $, @).
  $password_complexity = 0;

  // Check digits.
  if (preg_match('/[0-9]+/', $password)) {
    $password_complexity++;
  }

  // Check lower case letters.
  if (preg_match('/\p{Ll}/u', $password)) {
    $password_complexity++;
  }

  // Check upper case letters.
  if (preg_match('/\p{Lu}/u', $password)) {
    $password_complexity++;
  }

  // Check special characters.
  if (preg_match('/[^\p{Ll}\p{Lu}0-9]+/u', $password)) {
    $password_complexity++;
  }

  if ((mb_strlen($password, 'UTF-8') >= 8) && ($password_complexity >= 3)) {
    return;
  }

  $form_state->setErrorByName('pass', _dp_password_requirements_error());
}

/**
 * Returns the translated password requirement error message.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   Translated error message.
 */
function _dp_password_requirements_error(): TranslatableMarkup {
  return new TranslatableMarkup('The password must be at least 8 characters long and must contain at least three from the following character types: uppercase, lowercase, numeric and special characters (eg. &, $, @).');
}
